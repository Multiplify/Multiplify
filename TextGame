import random
import sys
import time




def main():

# Class we are using for defining our player as well as opponents
    class Person:
        def __init__ (self, name, level, attack, armor, health, gold, stagger, exp): # To-Do Magic, Defense Level, Agility, Weapon type
            self.name = name
            self.level = level
            self.attack = attack
            self.armor = armor # Yet to be implemented
            self.health = health
            self.gold = gold # Yet to be implemented
            self.stagger = stagger # Yet to be implemented
            self.exp = exp

        def stats(self):
            print(f"{self.name} level {self.level }\n Attack:{self.attack}\n Armor:{self.armor}\n Health:{self.health}\n Gold:{self.gold}\n")

        def stag(self):
            self.stagger = True

        def unStag(self):
            self.stagger = False

        def lup(self):
            if (self.exp / self.level) >= 10:
                self.exp -= (self.level * 10)
                self.level += 1
                print(f"You have leveled up! You are now level {self.level}")
                points = 1 + self.level
                count = points + points
                while count != points:
                    choice = input(f"You have {count - points} attribute points to allocate. You can level up Armor or Attack, which do you choose? ")
                    choice = choice.lower()
                    if choice not in ("armor", "attack"):
                        print("Try again")
                    elif choice == ("armor"):
                        self.armor += 1
                        count -= 1
                    elif choice == ("attack"):
                        self.attack += 1
                        count -= 1
                points = 0
                print("\n")
                print("YOUR NEW STATS \n")
                self.stats()
                self.lup()


        # Only allows names without numbers in them

    while True:
        pName = input("What is your name? ")
        if any(map(str.isdigit, pName)) == True:
            continue
        else:
            break

    # Player starting stats and first fight Lvl, Attack, Armor, Health, Gold, Stagger Condition, EXP
    Player = Person (pName ,1 , 10, 10, 100, 10, False, 0)
    print1by1(f"You are {Player.name}, a noble warrior. These are your stats. ")
    time.sleep(1)
    print(" ")
    Player.stats()

    #Introduces enemy
    Monster = Person ("Spidony" ,1, 10, 5, 100, 10, False, 33)
    print1by1(f"Your opponent is {Monster.name}, a viscous monster causing pain to the people of the nearby town of Artin. ")
    Monster.stats()

    #First battle
    battle(Player, Monster)

    Monster1 = Person("Big Spider" ,2, 10, 10, 100, 10, False, 66)
    #Second battle
    battle(Player, Monster1)



# Light or heavy attack, calls fight to calculate damage and dole out results
# Armor and stagger still unimplemented
def battle (Player, npc):
    while Player.health > 0 and npc.health > 0:
        playerAttack = input("You are now in battle! Heavy (h) or Light attack (l): ").lower()
        if playerAttack in ("h", "heavy"):
            print("You use a heavy attack, slashing at the spider wildly.\n")
            fight(Player, npc, playerAttack)
        elif playerAttack in ("l" , "light"):
            print("You attack lightly, darting within striking range just long enough to land a blow.\n")
            fight(Player, npc, playerAttack)

# Depending on the choice of heavy or light attack we have different results.
# Armor and stagger still unimplemented
def fight(player, npc, playerAttack):
        if playerAttack in ("h", "heavy"):
            crit = rNum(1,player.attack)
            if crit == player.attack:  # If the player gets a perfect roll double the damage on heavy attacks
                crit = crit * 2
                print(f"You land a critical strike! Damage is doubled to {crit}. ")
                npc.health -= crit
                attack = npcAttack(npc.attack, rNum(1,2)) # Calculates how much damage the NPC does to us
                player.health -= attack
                if npc.health < 1:
                    print(f"You slay the {npc.name}, he lays dead before you vanquished. ")
                    player.exp += npc.exp # When the player defeats a monster, they gain the monsters exp value
                    Player.lup() # Checks if the player can level up
                elif player.health < 1:
                    print(f"You are vanquished, you fall in defeat to the {npc.name} .")
            else:
                print(f"You deal {crit} damage. ")
                npc.health -= crit
                attack = npcAttack(npc.attack, rNum(1,2))
                player.health -= attack
                if npc.health < 1:
                    print("He dead yo. ")
                    player.exp += npc.exp # When the player defeats a monster, they gain the monsters exp value
                    player.lup() # Checks if the player can level up
                elif player.health < 1:
                    print(f"You are vanquished, you fall in defeat to the {npc.name} .")
        elif playerAttack in ("l" , "light"):
            lat = rNum(1, (player.attack/2))
            npc.health -= lat
            attack = npcAttack(npc.attack, rNum(1,2))
            player.health -= attack
            print(f"You deal {lat} damage. ")
            if npc.health < 1:
                print("Light attack death")
                player.exp += npc.exp # When the player defeats a monster, they gain the monsters exp value
                player.lup() # Checks if the player can level up
            elif player.health < 1:
                    print(f"You are vanquished, you fall in defeat to the {npc.name} .")

# Random number function
def rNum(x, y) :
    num = random.randint(int(x),int(y))
    return num

# Calculates enemy damage
def npcAttack(dmg, typ):
    if typ == 1:
        attack = rNum(1,dmg)
        if attack == dmg: # determines if a critical strike has occured.
            attack += attack
            print(f"The monster lands a critical strike dealing {attack} damage. ")
            return attack
        else:
            return attack
    elif typ == 2:
        attack = rNum(1, dmg/2)
        print(f"The monster slices into you doing {attack} damage. ")
        return attack

# Slow scrolls text
def print1by1(text, delay=0.05):
    for c in text:
        sys.stdout.write(c)
        sys.stdout.flush()
        time.sleep(delay)
    print




if __name__ == "__main__":
    main()
